{"ast":null,"code":"var _jsxFileName = \"/Users/susanna/Downloads/SimpleNext.js-project/src/components/ui/Form.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { Grid, makeStyles, Box } from '@material-ui/core';\nimport Dialog from './Dialog';\nimport personService from '../services/persons';\nimport PersonForm from './PersonForm';\nimport Notification from './Notification';\nconst useStyles = makeStyles(theme => ({\n  items: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'row'\n  },\n  dialog: {\n    paddingTop: '1rem'\n  }\n}));\nexport default function () {\n  const classes = useStyles();\n  const {\n    0: persons,\n    1: setPersons\n  } = useState([]);\n  const {\n    0: newName,\n    1: setNewName\n  } = useState('');\n  const {\n    0: newNumber,\n    1: setNewNumber\n  } = useState(''); //const [searchName, setSearchName] = useState('');\n  //const [showAll, setShowAll] = useState(true);\n\n  const {\n    0: notificationMessage,\n    1: setNotificationMessage\n  } = useState(null);\n  const {\n    0: errorMessage,\n    1: setErrorMessage\n  } = useState(null);\n  useEffect(() => {\n    personService.getAll().then(initialPersons => {\n      setPersons(initialPersons);\n    });\n  }, []);\n\n  const personIsAdded = (name, data) => {\n    let isAdded = data.find(el => el.name === name);\n\n    if (isAdded === undefined) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const addContact = event => {\n    event.preventDefault(); // Check if the contact already exists\n\n    const toUpdate = persons.filter(p => {\n      return p.name.includes(newName);\n    });\n\n    if (toUpdate.length === 1) {\n      const confirm = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`);\n\n      if (confirm) {\n        personService.update(toUpdate[0].id, _objectSpread({}, toUpdate[0], {\n          number: newNumber\n        })).then(updatedPerson => {\n          let updatedState = persons.filter(p => p.id !== updatedPerson.id);\n          updatedState = [...updatedState, updatedPerson];\n          setPersons(updatedState);\n          setNewName('');\n          setNewNumber('');\n          setNotificationMessage(`Added ${updatedPerson.name}`);\n          setTimeout(() => {\n            setNotificationMessage(null);\n          }, 2000);\n        }).catch(error => {\n          setErrorMessage(`Information of ${newName} has already been removed from server`);\n          setTimeout(() => {\n            setErrorMessage(null);\n          }, 5000);\n        });\n      }\n    } else {\n      // if not, save the person\n      const personObject = {\n        name: newName,\n        number: newNumber,\n        id: persons.length + 1\n      };\n      personService.create(personObject).then(returnedNote => {\n        if (personIsAdded(newName, persons)) {\n          alert(`${newName} is already added to phonebook`);\n        } else {\n          setPersons([...persons, {\n            name: newName,\n            number: newNumber\n          }]);\n        }\n\n        setNotificationMessage(`Added ${newName}`);\n        setTimeout(() => {\n          setNotificationMessage(null);\n        }, 2000);\n        setNewName('');\n        setNewNumber('');\n      }).catch(error => {\n        setErrorMessage(`Information of ${newName} has already been removed from server`);\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n      });\n    }\n  };\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  };\n\n  const cancel = () => {\n    setNewName('');\n    setNewNumber('');\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, __jsx(Grid, {\n    container: true,\n    className: classes.items,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, __jsx(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, __jsx(PersonForm, {\n    handleOnSubmit: addContact,\n    newName: newName,\n    handleOnNameChange: handleNameChange,\n    newNumber: newNumber,\n    handleOnNumberChange: handleNumberChange,\n    cancel: cancel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }))), __jsx(Box, {\n    className: classes.dialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, __jsx(Dialog, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  })), __jsx(Notification, {\n    type: \"error\",\n    message: errorMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/susanna/Downloads/SimpleNext.js-project/src/components/ui/Form.tsx"],"names":["React","useState","useEffect","Grid","makeStyles","Box","Dialog","personService","PersonForm","Notification","useStyles","theme","items","display","justifyContent","flexDirection","dialog","paddingTop","classes","persons","setPersons","newName","setNewName","newNumber","setNewNumber","notificationMessage","setNotificationMessage","errorMessage","setErrorMessage","getAll","then","initialPersons","personIsAdded","name","data","isAdded","find","el","undefined","addContact","event","preventDefault","toUpdate","filter","p","includes","length","confirm","window","update","id","number","updatedPerson","updatedState","setTimeout","catch","error","personObject","create","returnedNote","alert","handleNameChange","target","value","handleNumberChange","cancel"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Typography, Grid, makeStyles, Box } from '@material-ui/core';\nimport Dialog from './Dialog';\nimport personService from '../services/persons';\nimport PersonForm from './PersonForm';\nimport Persons from './Persons';\nimport Notification from './Notification';\n\nconst useStyles = makeStyles((theme) => ({\n   items: {\n      display:'flex',\n      justifyContent: 'center',\n      flexDirection: 'row',\n   },\n   dialog:{\n    paddingTop:'1rem',   \n  },\n   \n}));\n\n\nexport default function () {\n\n  const classes = useStyles();\n\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  //const [searchName, setSearchName] = useState('');\n  //const [showAll, setShowAll] = useState(true);\n  const [notificationMessage, setNotificationMessage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons);\n      });\n  }, []);\n\n  const personIsAdded = (name, data) => {\n    let isAdded = data.find(el => el.name === name);\n    if (isAdded === undefined) {\n      return false;\n    }\n    return true;\n  } \n\n  const addContact = event => {\n    event.preventDefault();\n    // Check if the contact already exists\n    const toUpdate = persons.filter(p => {\n      return p.name.includes(newName);\n    });\n    if (toUpdate.length === 1) {\n      const confirm = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`);\n      if (confirm) {\n        personService\n          .update(toUpdate[0].id, {\n            ...toUpdate[0],\n            number: newNumber\n          })\n          .then(updatedPerson => {\n            let updatedState = persons.filter(p => p.id !== updatedPerson.id);\n            updatedState = [...updatedState, updatedPerson];\n            setPersons(updatedState);\n            setNewName('');\n            setNewNumber('');\n            setNotificationMessage(`Added ${updatedPerson.name}`);\n            setTimeout(() => {\n              setNotificationMessage(null)\n            }, 2000);\n          })\n          .catch(error => {\n            setErrorMessage(`Information of ${newName} has already been removed from server`);\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000);\n          })\n      }\n    } else {\n      // if not, save the person\n      const personObject = {\n        name: newName,\n        number: newNumber,\n        id: persons.length + 1\n      }\n\n      personService\n        .create(personObject)\n        .then(returnedNote => {\n          if (personIsAdded(newName, persons)) {\n            alert(`${newName} is already added to phonebook`);\n          }\n          else {\n            setPersons([...persons, { name: newName, number: newNumber }]);\n          }\n          setNotificationMessage(`Added ${newName}`);\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 2000);\n          setNewName('');\n          setNewNumber('');\n        })\n        .catch(error => {\n          setErrorMessage(`Information of ${newName} has already been removed from server`);\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000);\n        })\n    }\n  }\n  \n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  }\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  }\n\n  const cancel = () => {\n    setNewName('');\n    setNewNumber('');\n  };\n\n      return (\n        <div>\n          {/*<Notification type={'error'} message={notificationMessage} />*/}\n          <Grid container={true} className={classes.items}>\n            <Grid item={true}>\n              <PersonForm\n                handleOnSubmit={addContact}\n                newName={newName}\n                handleOnNameChange={handleNameChange}\n                newNumber={newNumber}\n                handleOnNumberChange={handleNumberChange}\n                cancel = {cancel}\n              />\n            </Grid>\n          </Grid>\n          <Box className={classes.dialog}>\n             <Dialog  />\n          </Box>\n          <Notification type={\"error\"} message={errorMessage} />\n        </div>\n      );\n    }\n\n"]},"metadata":{},"sourceType":"module"}