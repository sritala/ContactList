{"ast":null,"code":"var _jsxFileName = \"/Users/susanna/Downloads/SimpleNext.js-project/src/components/ui/Form.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\n/*import { Typography, makeStyles } from '@material-ui/core';\nimport Dialog from './Dialog';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';*/\n\nimport personService from '../services/persons';\nimport Filter from './Filter';\nimport PersonForm from './PersonForm';\nimport Persons from './Persons';\nimport Notification from './Notification';\nexport default function () {\n  const {\n    0: persons,\n    1: setPersons\n  } = useState([]);\n  const {\n    0: newName,\n    1: setNewName\n  } = useState('');\n  const {\n    0: newNumber,\n    1: setNewNumber\n  } = useState('');\n  const {\n    0: searchName,\n    1: setSearchName\n  } = useState('');\n  const {\n    0: showAll,\n    1: setShowAll\n  } = useState(true);\n  const {\n    0: notificationMessage,\n    1: setNotificationMessage\n  } = useState(null);\n  const {\n    0: errorMessage,\n    1: setErrorMessage\n  } = useState(null);\n  useEffect(() => {\n    personService.getAll().then(initialPersons => {\n      setPersons(initialPersons);\n    });\n  }, []);\n  const contactsToShow = showAll ? persons : persons.filter(person => {\n    let toFilter = person.name.toLocaleLowerCase();\n    let toSearch = searchName.toLowerCase();\n    return toFilter.includes(toSearch);\n  });\n\n  const personIsAdded = (name, data) => {\n    let isAdded = data.find(el => el.name === name);\n\n    if (isAdded === undefined) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const addContact = event => {\n    event.preventDefault(); // Check if the contact already exists\n\n    const toUpdate = persons.filter(p => {\n      return p.name.includes(newName);\n    });\n\n    if (toUpdate.length === 1) {\n      const confirm = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`);\n\n      if (confirm) {\n        personService.update(toUpdate[0].id, _objectSpread({}, toUpdate[0], {\n          number: newNumber\n        })).then(updatedPerson => {\n          let updatedState = persons.filter(p => p.id !== updatedPerson.id);\n          updatedState = [...updatedState, updatedPerson];\n          setPersons(updatedState);\n          setNewName('');\n          setNewNumber('');\n          setNotificationMessage(`Added ${updatedPerson.name}`);\n          setTimeout(() => {\n            setNotificationMessage(null);\n          }, 2000);\n        }).catch(error => {\n          setErrorMessage(`Information of ${newName} has already been removed from server`);\n          setTimeout(() => {\n            setErrorMessage(null);\n          }, 5000);\n        });\n      }\n    } else {\n      // if not, save the person\n      const personObject = {\n        name: newName,\n        number: newNumber,\n        id: persons.length + 1\n      };\n      personService.create(personObject).then(returnedNote => {\n        if (personIsAdded(newName, persons)) {\n          alert(`${newName} is already added to phonebook`);\n        } else {\n          setPersons([...persons, {\n            name: newName,\n            number: newNumber\n          }]);\n        }\n\n        setNotificationMessage(`Added ${newName}`);\n        setTimeout(() => {\n          setNotificationMessage(null);\n        }, 2000);\n        setNewName('');\n        setNewNumber('');\n      }).catch(error => {\n        setErrorMessage(`Information of ${newName} has already been removed from server`);\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n      });\n    }\n  };\n\n  const deletePerson = id => {\n    personService.remove(id).then(() => {\n      const updatedPersons = persons.filter(p => p.id !== id);\n      setPersons(updatedPersons);\n    });\n  };\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleSearchName = event => {\n    setSearchName(event.target.value);\n    setShowAll(false);\n  };\n\n  const cancel = () => {\n    setValues(initialInformation);\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"Phonebook\"), __jsx(Notification, {\n    type: \"error\",\n    message: errorMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }), __jsx(Filter, {\n    onChangeHandler: handleSearchName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }), __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"Add a new\"), __jsx(PersonForm, {\n    handleOnSubmit: addContact,\n    newName: newName,\n    handleOnNameChange: handleNameChange,\n    newNumber: newNumber,\n    handleOnNumberChange: handleNumberChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }), __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"Numbers\"), __jsx(Persons, {\n    persons: contactsToShow,\n    onDelete: deletePerson,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }));\n}\n{\n  /*   return ( \n      <div>\n        <form onSubmit={handleOnSubmit} className={classes.root} noValidate autoComplete=\"off\">\n        <Grid container={true} className={classes.container}>\n          <Grid item={true} className={classes.item}>\n          <TextField\n            id=\"standard-multiline-flexible\"\n            label=\"First name\"\n            value={values.firstName}\n            onChange={handleChange}\n            name={'firstName'}\n          />\n          </Grid>\n          <Grid item={true} className={classes.item} >\n          <TextField\n            id=\"standard-textarea\"\n            label=\"Last name\"\n            value={values.lastName}\n            onChange={handleChange}\n            name={'lastName'}\n          />\n          </Grid>\n          <Grid item={true} className={classes.item}>\n           <TextField\n            id=\"standard-textarea\"\n            label=\"Email\"\n            value={values.email}\n            onChange={handleChange}\n            name={'email'}\n          />\n          </Grid>\n          <Grid container={true} spacing={1} className={classes.buttons}>\n            <Grid item={true} className={classes.save}>\n              <Button style={{width:180, height: '3rem'}}variant=\"contained\"  color=\"primary\"type=\"submit\">Save</Button>\n            </Grid>\n            <Grid item={true} className={classes.save}>\n              <Button style={{width:100, height: '3rem'}} variant=\"contained\" onClick={cancel} color=\"secondary\">Cancel</Button>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Box className={classes.dialog}>\n          <Dialog persons={persons} currentValues={values}/>\n        </Box>\n      </form> \n    </div>\n    )\n  */\n}","map":{"version":3,"sources":["/Users/susanna/Downloads/SimpleNext.js-project/src/components/ui/Form.tsx"],"names":["React","useState","useEffect","personService","Filter","PersonForm","Persons","Notification","persons","setPersons","newName","setNewName","newNumber","setNewNumber","searchName","setSearchName","showAll","setShowAll","notificationMessage","setNotificationMessage","errorMessage","setErrorMessage","getAll","then","initialPersons","contactsToShow","filter","person","toFilter","name","toLocaleLowerCase","toSearch","toLowerCase","includes","personIsAdded","data","isAdded","find","el","undefined","addContact","event","preventDefault","toUpdate","p","length","confirm","window","update","id","number","updatedPerson","updatedState","setTimeout","catch","error","personObject","create","returnedNote","alert","deletePerson","remove","updatedPersons","handleNameChange","target","value","handleNumberChange","handleSearchName","cancel","setValues","initialInformation"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n/*import { Typography, makeStyles } from '@material-ui/core';\nimport Dialog from './Dialog';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';*/\nimport personService from '../services/persons';\nimport Filter from './Filter';\nimport PersonForm from './PersonForm';\nimport Persons from './Persons';\nimport Notification from './Notification';\n\nexport default function () {\n\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [searchName, setSearchName] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [notificationMessage, setNotificationMessage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons);\n      });\n  }, []);\n\n  const contactsToShow = showAll\n    ? persons\n    : persons.filter(person => {\n        let toFilter = person.name.toLocaleLowerCase();\n        let toSearch = searchName.toLowerCase()\n        return toFilter.includes(toSearch);\n      });\n\n  const personIsAdded = (name, data) => {\n    let isAdded = data.find(el => el.name === name);\n    if (isAdded === undefined) {\n      return false;\n    }\n    return true;\n  } \n\n  const addContact = event => {\n    event.preventDefault();\n    // Check if the contact already exists\n    const toUpdate = persons.filter(p => {\n      return p.name.includes(newName);\n    });\n    if (toUpdate.length === 1) {\n      const confirm = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`);\n      if (confirm) {\n        personService\n          .update(toUpdate[0].id, {\n            ...toUpdate[0],\n            number: newNumber\n          })\n          .then(updatedPerson => {\n            let updatedState = persons.filter(p => p.id !== updatedPerson.id);\n            updatedState = [...updatedState, updatedPerson];\n            setPersons(updatedState);\n            setNewName('');\n            setNewNumber('');\n            setNotificationMessage(`Added ${updatedPerson.name}`);\n            setTimeout(() => {\n              setNotificationMessage(null)\n            }, 2000);\n          })\n          .catch(error => {\n            setErrorMessage(`Information of ${newName} has already been removed from server`);\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000);\n          })\n      }\n    } else {\n      // if not, save the person\n      const personObject = {\n        name: newName,\n        number: newNumber,\n        id: persons.length + 1\n      }\n\n      personService\n        .create(personObject)\n        .then(returnedNote => {\n          if (personIsAdded(newName, persons)) {\n            alert(`${newName} is already added to phonebook`);\n          }\n          else {\n            setPersons([...persons, { name: newName, number: newNumber }]);\n          }\n          setNotificationMessage(`Added ${newName}`);\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 2000);\n          setNewName('');\n          setNewNumber('');\n        })\n        .catch(error => {\n          setErrorMessage(`Information of ${newName} has already been removed from server`);\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000);\n        })\n    }\n  }\n\n  const deletePerson = id => {\n    personService\n      .remove(id)\n      .then(() => {\n        const updatedPersons = persons.filter(p => p.id !== id);\n        setPersons(updatedPersons);\n      })\n  }\n  \n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  }\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  }\n\n  const handleSearchName = event => {\n    setSearchName(event.target.value);\n    setShowAll(false);\n  }\n\n  const cancel = () => {\n    setValues(initialInformation);\n  };\n\n\n      return (\n        <div>\n          <h2>Phonebook</h2>\n          {/*<Notification type={'error'} message={notificationMessage} />*/}\n          <Notification type={\"error\"} message={errorMessage} />\n          <Filter onChangeHandler={handleSearchName} />\n          <h2>Add a new</h2>\n          <PersonForm\n            handleOnSubmit={addContact}\n            newName={newName}\n            handleOnNameChange={handleNameChange}\n            newNumber={newNumber}\n            handleOnNumberChange={handleNumberChange}\n          />\n          <h2>Numbers</h2>\n          <Persons\n            persons={contactsToShow}\n            onDelete={deletePerson}\n          />\n        </div>\n      );\n    }\n\n{ /*   return ( \n      <div>\n        <form onSubmit={handleOnSubmit} className={classes.root} noValidate autoComplete=\"off\">\n        <Grid container={true} className={classes.container}>\n          <Grid item={true} className={classes.item}>\n          <TextField\n            id=\"standard-multiline-flexible\"\n            label=\"First name\"\n            value={values.firstName}\n            onChange={handleChange}\n            name={'firstName'}\n          />\n          </Grid>\n          <Grid item={true} className={classes.item} >\n          <TextField\n            id=\"standard-textarea\"\n            label=\"Last name\"\n            value={values.lastName}\n            onChange={handleChange}\n            name={'lastName'}\n          />\n          </Grid>\n          <Grid item={true} className={classes.item}>\n           <TextField\n            id=\"standard-textarea\"\n            label=\"Email\"\n            value={values.email}\n            onChange={handleChange}\n            name={'email'}\n          />\n          </Grid>\n          <Grid container={true} spacing={1} className={classes.buttons}>\n            <Grid item={true} className={classes.save}>\n              <Button style={{width:180, height: '3rem'}}variant=\"contained\"  color=\"primary\"type=\"submit\">Save</Button>\n            </Grid>\n            <Grid item={true} className={classes.save}>\n              <Button style={{width:100, height: '3rem'}} variant=\"contained\" onClick={cancel} color=\"secondary\">Cancel</Button>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Box className={classes.dialog}>\n          <Dialog persons={persons} currentValues={values}/>\n        </Box>\n      </form> \n    </div>\n    )\n*/}\n\n"]},"metadata":{},"sourceType":"module"}